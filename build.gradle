import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.jvm.Jvm

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.runtime' version '1.8.5'
    id "name.remal.check-updates" version "1.0.187"

    // TODO no good alternative to maven duplicate finder
    // id "net.idlestate.gradle-duplicate-classes-check" version "1.0.2"

    id "ca.cutterslade.analyze" version "1.4.1"
}

version = readEnvOrDefault('VERSION', '0.DEV')
//noinspection GroovyUnusedAssignment
sourceCompatibility = '14'
ext.javafxVersion = '14.0.1'

application {
    mainClassName = 'net.yudichev.googlephotosupload.ui.Launcher'
    applicationName = 'Jiotty Photos Uploader'
    applicationDefaultJvmArgs = ['--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                                 '--add-opens', 'javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED',
                                 '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
                                 '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
                                 '--add-exports', 'javafx.graphics/com.sun.javafx.menu=ALL-UNNAMED']
}

String clientSecretPath = readEnvOrNull('CLIENT_SECRET_PATH')
if (clientSecretPath) {
    if (!file(clientSecretPath).exists()) {
        throw new StopExecutionException("Client secret file not found: " + clientSecretPath)
    }
    processResources {
        from file(clientSecretPath)
        rename(clientSecretPath, 'client_secret_641898159424-0tmk9ngs1aog13ef0v4bg1njtnndj1c3.apps.googleusercontent.com.json')
    }
}

javafx {
    version = "$javafxVersion"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': archiveVersion
    }
}

dependencies {
    ext.orgJunitJupiterVersion = '5.6.0'
    ext.orgMockitoVersion = '3.2.4'
    ext.orgImmutablesVersion = '2.8.3'
    ext.netYudichevJiottyVersion = '1.5.1'

    annotationProcessor "org.immutables:value:$orgImmutablesVersion"
    testAnnotationProcessor "org.immutables:value:$orgImmutablesVersion"

    implementation platform("net.yudichev.jiotty:jiotty-bom:$netYudichevJiottyVersion")
    implementation platform("com.google.inject:guice-bom:4.2.2")

    // This is needed as we depend on no_aop guice instead (regular Guice does not work on Java 14)
    def withoutGuice = {
        exclude group: "com.google.inject", module: "guice"
    }

    implementation "net.yudichev.jiotty:jiotty-common", withoutGuice
    implementation "net.yudichev.jiotty:jiotty-connector-google-common", withoutGuice
    implementation "net.yudichev.jiotty:jiotty-connector-google-photos", withoutGuice
    implementation "com.google.inject.extensions:guice-assistedinject", withoutGuice
    implementation "org.slf4j:slf4j-api"
    implementation "org.apache.logging.log4j:log4j-api"
    implementation "com.google.inject:guice::no_aop"
    implementation "javax.inject:javax.inject"
    implementation "com.google.guava:guava:29.0-jre"
    implementation "com.google.code.findbugs:jsr305"
    implementation "com.google.errorprone:error_prone_annotations"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.google.api:gax"
    implementation "com.google.api.grpc:proto-google-common-protos"
    implementation "com.google.http-client:google-http-client"
    implementation "commons-cli:commons-cli:1.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.9.9"
    implementation "de.codecentric.centerdevice:centerdevice-nsmenufx:2.1.7"
    implementation "io.grpc:grpc-api"
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.sandec:mdfx:0.1.6"

    // This is to test dependency analyser
    //implementation "org.apache.commons:commons-skin:4.2"
    compileOnly "org.immutables:value:$orgImmutablesVersion"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.12.1"
    runtimeOnly "org.apache.logging.log4j:log4j-jcl:2.12.1"
    runtimeOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.9"
    runtimeOnly "com.lmax:disruptor:3.4.2"

    testImplementation "net.yudichev.jiotty:jiotty-common"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$orgJunitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$orgJunitJupiterVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$orgMockitoVersion"
    testImplementation "org.hamcrest:hamcrest:2.1"
    testCompileOnly "org.immutables:value:$orgImmutablesVersion"

    // these are added by the javafx plugin
    permitUnusedDeclared "org.openjfx:javafx-base:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-controls:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-graphics:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion:mac"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion:linux"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion:win"
}

repositories {
    mavenLocal() {
        content {
            includeGroup "net.yudichev.jiotty"
        }
    }
    mavenCentral()
    maven {
        url "https://maven.google.com"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        url "http://sandec.bintray.com/repo"
    }
}

test {
    useJUnitPlatform()
}

runtime {
    //noinspection GroovyAssignabilityCheck, GroovyAccessibility
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages']

    // required by httpclient, missed by default when building and running on Windows
    //noinspection GroovyAssignabilityCheck,GroovyAccessibility
    modules = [
            // required by httpclient, missed by default when building and running on Windows
            'java.naming',
            // required to establish an SSL connection
            'jdk.crypto.ec',
            // required for a heap dump via JMX
            'jdk.management'
    ]
    additive = true

    jpackage {
        jvmArgs = ['-Dprism.verbose=true']
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            installerType = 'dmg'
            imageOptions = ['--verbose', /*'--mac-sign',*/ '--mac-signing-key-user-name', 'Alexey Yudichev (J4R72JZQ9P)']
            installerOptions = ['--verbose']
            resourceDir = file("$buildDir/packaging-resources/macOS/out")
        }
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
            imageOptions = ['--verbose']
            installerOptions = ['--verbose', '--win-per-user-install', '--win-menu', '--win-upgrade-uuid', '58e3cc92-0df9-4089-9609-8ad54b2608e7']
            resourceDir = file("$rootDir/src/main/packaging-resources/windows")
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            imageName = 'JiottyPhotosUploader'  // cannot have spaces in Debian resource names
            installerName = 'JiottyPhotosUploader' // cannot have spaces in Debian resource names
            imageOptions = ['--verbose']
            resourceDir = file("$rootDir/src/main/packaging-resources/linux")
            /*
  --linux-package-name <package name>
          Name for Linux package, defaults to the application name
  --linux-deb-maintainer <email address>
          Maintainer for .deb package
  --linux-menu-group <menu-group-name>
          Menu group this application is placed in
  --linux-package-deps
          Required packages or capabilities for the application
  --linux-rpm-license-type <type string>
          Type of the license ("License: <value>" of the RPM .spec)
  --linux-app-release <release value>
          Release value of the RPM <name>.spec file or
          Debian revision value of the DEB control file.
  --linux-app-category <category value>
          Group value of the RPM <name>.spec file or
          Section value of DEB control file.
  --linux-shortcut
          Creates a shortcut for the application
            */
            installerOptions = ['--verbose', '--linux-shortcut', '--linux-package-name', 'jiotty-photos-uploader']
        }
    }
}

if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
    jpackage.dependsOn 'copyMacOsPackagingResources'
}

task copyMacOsPackagingResources(type: Copy) {
    from("$rootDir/src/main/packaging-resources/macOS/out") {
        exclude '**/*.plist'
    }
    from("$rootDir/src/main/packaging-resources/macOS/out") {
        include '**/*.plist'
        filter(ReplaceTokens, tokens: [version: version])
    }
    into "$buildDir/packaging-resources/macOS/out"
}

task fullpackage {
    dependsOn check
    dependsOn jpackage

    tasks.findByName('jpackage').mustRunAfter 'test'

    doFirst {
        if (!clientSecretPath) {
            throw new StopExecutionException("Client secret path environment variable missing")
        }
    }
    doLast {
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            exec {
                commandLine "$projectDir/macos_notarize_dmg.sh", "$project.name", "$version", Jvm.current().getJavaHome()
            }
        }
    }
}

private static readEnvOrNull(String variableName) {
    System.getProperty(variableName, System.getenv(variableName))
}

private static readEnvOrDefault(String variableName, String defaultValue) {
    readEnvOrNull(variableName) ?: defaultValue
}
